// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: sensor.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TradeService_StreamTrades_FullMethodName = "/TradeService/StreamTrades"
)

// TradeServiceClient is the client API for TradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServiceClient interface {
	StreamTrades(ctx context.Context, opts ...grpc.CallOption) (TradeService_StreamTradesClient, error)
}

type tradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceClient(cc grpc.ClientConnInterface) TradeServiceClient {
	return &tradeServiceClient{cc}
}

func (c *tradeServiceClient) StreamTrades(ctx context.Context, opts ...grpc.CallOption) (TradeService_StreamTradesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradeService_ServiceDesc.Streams[0], TradeService_StreamTrades_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &tradeServiceStreamTradesClient{ClientStream: stream}
	return x, nil
}

type TradeService_StreamTradesClient interface {
	Send(*TradeRequest) error
	CloseAndRecv() (*TradeResponse, error)
	grpc.ClientStream
}

type tradeServiceStreamTradesClient struct {
	grpc.ClientStream
}

func (x *tradeServiceStreamTradesClient) Send(m *TradeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradeServiceStreamTradesClient) CloseAndRecv() (*TradeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeServiceServer is the server API for TradeService service.
// All implementations must embed UnimplementedTradeServiceServer
// for forward compatibility
type TradeServiceServer interface {
	StreamTrades(TradeService_StreamTradesServer) error
	mustEmbedUnimplementedTradeServiceServer()
}

// UnimplementedTradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeServiceServer struct {
}

func (UnimplementedTradeServiceServer) StreamTrades(TradeService_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedTradeServiceServer) mustEmbedUnimplementedTradeServiceServer() {}

// UnsafeTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceServer will
// result in compilation errors.
type UnsafeTradeServiceServer interface {
	mustEmbedUnimplementedTradeServiceServer()
}

func RegisterTradeServiceServer(s grpc.ServiceRegistrar, srv TradeServiceServer) {
	s.RegisterService(&TradeService_ServiceDesc, srv)
}

func _TradeService_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeServiceServer).StreamTrades(&tradeServiceStreamTradesServer{ServerStream: stream})
}

type TradeService_StreamTradesServer interface {
	SendAndClose(*TradeResponse) error
	Recv() (*TradeRequest, error)
	grpc.ServerStream
}

type tradeServiceStreamTradesServer struct {
	grpc.ServerStream
}

func (x *tradeServiceStreamTradesServer) SendAndClose(m *TradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradeServiceStreamTradesServer) Recv() (*TradeRequest, error) {
	m := new(TradeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeService_ServiceDesc is the grpc.ServiceDesc for TradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TradeService",
	HandlerType: (*TradeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTrades",
			Handler:       _TradeService_StreamTrades_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sensor.proto",
}
